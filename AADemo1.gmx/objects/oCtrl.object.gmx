<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init stats

score=0//sets score to 0
lives=3//sets lives to 3

globalvar combo,achsliced;// creates twp global variables 

combo=0//sets combo to 0
achsliced=0//sets achaslice to 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Multitouch swipe - init

globalvar swipex,swipey,swipelen,swipedir,swipemax,swipedx1,swipedx2,swipedy1,swipedy2,shape;

for(i=0;i&lt;=9;i+=1)
{
    swipex[0,i]=0
    swipey[0,i]=0
    swipelen[0,i]=0
    swipedir[0,i]=0
    
    swipedx1[0,i]=0
    swipedy1[0,i]=0
    swipedx2[0,i]=0
    swipedy2[0,i]=0
    
    swipemax[i]=0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control spawning of vegetables

alarm[1]=60+floor(score/10)+irandom(60)//Controls how many veggies are on the screen
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise particles

globalvar part,pfxcarrot,pfxpotato,pfxpepper,pfxbroccoli,pfxspringonion,pfxonion;

part=part_system_create()
part_system_depth(part,150)

pfxpotato=part_type_create()
part_type_sprite(pfxpotato,sPFXPotato,0,0,1)
part_type_orientation(pfxpotato,0,360,4,0,0)
part_type_alpha3(pfxpotato,1,1,0)
part_type_life(pfxpotato,75,105)
part_type_direction(pfxpotato,0,360,0,0)
part_type_speed(pfxpotato,4,5,0,0)
part_type_gravity(pfxpotato,0.2,270)

pfxcarrot=part_type_create()
part_type_sprite(pfxcarrot,sPFXCarrot,0,0,1)
part_type_orientation(pfxcarrot,0,360,4,0,0)
part_type_alpha3(pfxcarrot,1,1,0)
part_type_life(pfxcarrot,75,105)
part_type_direction(pfxcarrot,0,360,0,0)
part_type_speed(pfxcarrot,4,5,0,0)
part_type_gravity(pfxcarrot,0.2,270)

pfxpepper=part_type_create()
part_type_sprite(pfxpepper,sPFXPepper,0,0,1)
part_type_orientation(pfxpepper,0,360,4,0,0)
part_type_alpha3(pfxpepper,1,1,0)
part_type_life(pfxpepper,75,105)
part_type_direction(pfxpepper,0,360,0,0)
part_type_speed(pfxpepper,4,5,0,0)
part_type_gravity(pfxpepper,0.2,270)

pfxbroccoli=part_type_create()
part_type_sprite(pfxbroccoli,sPFXBroccoli,0,0,1)
part_type_orientation(pfxbroccoli,0,360,4,0,0)
part_type_alpha3(pfxbroccoli,1,1,0)
part_type_life(pfxbroccoli,75,105)
part_type_direction(pfxbroccoli,0,360,0,0)
part_type_speed(pfxbroccoli,4,5,0,0)
part_type_gravity(pfxbroccoli,0.2,270)

pfxspringonion=part_type_create()
part_type_sprite(pfxspringonion,sPFXSpringOnion,0,0,1)
part_type_orientation(pfxspringonion,0,360,4,0,0)
part_type_alpha3(pfxspringonion,1,1,0)
part_type_life(pfxspringonion,75,105)
part_type_direction(pfxspringonion,0,360,0,0)
part_type_speed(pfxspringonion,4,5,0,0)
part_type_gravity(pfxspringonion,0.2,270)

pfxonion=part_type_create()
part_type_sprite(pfxonion,sPFXOnion,0,0,1)
part_type_orientation(pfxonion,0,360,4,0,0)
part_type_alpha3(pfxonion,1,1,0)
part_type_life(pfxonion,75,105)
part_type_direction(pfxonion,0,360,0,0)
part_type_speed(pfxonion,4,5,0,0)
part_type_gravity(pfxonion,0.2,270)


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset combo

combo=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn vegetables

alarm[1]=60+floor(score/10)+irandom(60)//This sets the alarm to a different value everytime it is called

if lives&lt;1 exit//checks to see if the player still has lives

repeat( 1+irandom(max(floor(sqrt(score/3)),1)) )//as long as the above condition is true, it will repeat the following code
{
    p=instance_create(random(room_width),room_height+64,oVeg)//creates a random veggie
    p.vspeed=-15-random(8)//sets a random vertical speed and gradually slows down the object
    p.hspeed=-(p.x-(room_width/2))/50//sets a random horizontal speed and gradually slows down the object
    p.hspeed*=choose(0.7,0.8,0.9,1,1.1,1.2,1.3)//chooses a starting horizontal speed from the array
    p.gravity=0.3//sets room gravity to .3
    p.image_angle=random(360)//this sets the object angle when chopped to a random degree between 0&lt;x&lt;360
    p.sprite_index=choose(sCarrot,sPotato,sPepper,sBroccoli,sSpringOnion,sOnion,sCarrot,sPotato,sPepper,sBroccoli,sSpringOnion,sOnion,sTNT)
    // ^ chooses a random sprite to show
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swipe Fadeout
//There needs to be something in the Actions, this Alarm will be called to stop the 
//swipe animation
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///This creates the swipe animation 
for(j=0;j&lt;=9;j+=1)
{
    if device_mouse_check_button_pressed(j,mb_left)
    {
        for(k=j;k&lt;=9;k+=1)
        {
            swipemax[k]=0
            
            swipex[0,k]=device_mouse_x(k)
            swipey[0,k]=device_mouse_y(k)
            
            swipedx1[0,k]=device_mouse_x(k)
            swipedy1[0,k]=device_mouse_y(k)
            swipedx2[0,k]=device_mouse_x(k)
            swipedy2[0,k]=device_mouse_y(k)
            
            swipelen[0,k]=1
            swipedir[0,k]=0
        }
        
        sound_play(xSlice)
    }
    else if device_mouse_check_button(j,mb_left)
    {
        if point_distance(device_mouse_x(j),device_mouse_y(j),swipex[swipemax[j],j],swipey[swipemax[j],j])&gt;6
        {
            if swipemax[j]=0
            {            
                swipex[0,j]=device_mouse_x(j)
                swipey[0,j]=device_mouse_y(j)
                
                swipedx1[0,j]=device_mouse_x(j)
                swipedy1[0,j]=device_mouse_y(j)
                swipedx2[0,j]=device_mouse_x(j)
                swipedy2[0,j]=device_mouse_y(j)
                
                swipelen[0,j]=1
                swipedir[0,j]=0
            }
            
            if swipemax[j]&lt;20
            swipemax[j]+=1
            
            else
            {
                for(i=1;i&lt;=swipemax[j];i+=1)
                {
                    swipex[i-1,j]  =swipex[i,j]
                    swipey[i-1,j]  =swipey[i,j]
                    swipedx1[i-1,j]=swipedx1[i,j]
                    swipedy1[i-1,j]=swipedy1[i,j]
                    swipedx2[i-1,j]=swipedx2[i,j]
                    swipedy2[i-1,j]=swipedy2[i,j]
                    swipelen[i-1,j]=swipelen[i,j]
                    swipedir[i-1,j]=swipedir[i,j]
                }
            }
            
            swipex[swipemax[j],j]=device_mouse_x(j)
            swipey[swipemax[j],j]=device_mouse_y(j)
            
            swipelen[swipemax[j],j]=point_distance(swipex[swipemax[j]-1,j],swipey[swipemax[j]-1,j],swipex[swipemax[j],j],swipey[swipemax[j],j])
            swipedir[swipemax[j],j]=point_direction(swipex[swipemax[j]-1,j],swipey[swipemax[j]-1,j],swipex[swipemax[j],j],swipey[swipemax[j],j])
            
            p=instance_create(swipex[swipemax[j],j],swipey[swipemax[j],j],oColMask)
            p.image_xscale=swipelen[swipemax[j],j]
            p.image_angle=swipedir[swipemax[j],j]+180
            
            swipedx1[swipemax[j],j]=swipex[swipemax[j],j]+lengthdir_x(swipelen[swipemax[j],j]/8,swipedir[swipemax[j],j]+90)
            swipedy1[swipemax[j],j]=swipey[swipemax[j],j]+lengthdir_y(swipelen[swipemax[j],j]/8,swipedir[swipemax[j],j]+90)
            swipedx2[swipemax[j],j]=swipex[swipemax[j],j]+lengthdir_x(swipelen[swipemax[j],j]/8,swipedir[swipemax[j],j]-90)
            swipedy2[swipemax[j],j]=swipey[swipemax[j],j]+lengthdir_y(swipelen[swipemax[j],j]/8,swipedir[swipemax[j],j]-90)
        }
        
        alarm[0]=30
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart controller

if mouse_x&gt;room_width-200 &amp;&amp; mouse_y&gt;room_height-90 room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw slice

for(j=0;j&lt;=9;j+=1)
{
    var multi;
    multi=0.5;
    
    if alarm[0]&gt;0 or mouse_check_button(mb_left)
    {
        if alarm[0]&gt;0 draw_set_alpha(median(0,1,0.5*multi*(alarm[0]/30)))
        else draw_set_alpha(multi*0.5)
        
        draw_set_color(c_white)
            
        for(i=2;i&lt;=swipemax[j];i+=1)
        {
            if alarm[0]&gt;0 draw_set_alpha(median(0,1,multi*0.5*(alarm[0]/30)))
            else draw_set_alpha(multi*0.5)
            
            draw_triangle(swipedx1[i,j],swipedy1[i,j],
                          swipedx2[i,j],swipedy2[i,j],
                          swipedx1[i-1,j],swipedy1[i-1,j],0)
            
            draw_triangle(swipedx2[i-1,j],swipedy2[i-1,j],
                          swipedx2[i,j],swipedy2[i,j],
                          swipedx1[i-1,j],swipedy1[i-1,j],0)
            
            if alarm[0]&gt;0 draw_set_alpha(median(0,1,multi*(alarm[0]/30)))
            else draw_set_alpha(multi)
        }
    }
    
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw HUD

draw_set_color(c_white)
draw_set_valign(fa_top)

draw_set_font(fHUDSmall)

draw_set_halign(fa_left)
draw_text(32,16,"SLICED")
draw_set_halign(fa_right)
draw_text(room_width-32,16,"CUT THE")

draw_set_font(fHUDLarge)

draw_set_halign(fa_left)
draw_text(32,45,string(score))
draw_set_halign(fa_right)
draw_text(room_width-32,45,"VEG")

draw_set_valign(fa_bottom)

draw_set_font(fHUDSmall)

draw_set_halign(fa_left)
draw_text(32,room_height-16,"LIVES")
draw_set_halign(fa_right)
draw_text(room_width-32,room_height-16,"RESTART")

draw_set_font(fHUDLarge)

var livesdisp;
livesdisp=""
if lives&gt;0 {repeat(lives) livesdisp+="X"}

draw_set_halign(fa_left)
draw_text(32,room_height-45,string(livesdisp))
draw_set_halign(fa_right)
//draw_text(room_width-32,room_height-45,"RESTART")


if lives&lt;1 draw_sprite(sGameOver,0,room_width/2,room_height/2)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
